请大神们帮我看看是不是程序哪里有错，python小白
#coding=gbk
class Car():
    '''一次模拟汽车的简单尝试'''
<code>def __init__(self,make,model,year):
    '''初始化描述汽车属性'''
    self.make=make
    self.model=model
    self.year=year
    self.odometer_reading=0

def get_descriptive_name(self):
    '''返回整洁的描述性信息'''
    long_name=str(self.year)+' ' +self.make+' '+self.model
    return long_name.title()

def read_odometer(self):
    '''打印出里程表'''
    print("This car has "+str(self.odometer_reading)+" miles on it.")

def change_odometer(self,mileage):
    '''
    随时改变里程表
    禁止将里程表回调
    '''
    if mileage>=self.odometer_reading:
        self.odometer_reading=mileage
    else:
        print("You can't roll back an odometer!")

def add_odometer(self,miles):
    '''将里程表读数增加指定的值'''
    self.odometer_reading+=miles
</code>
class ElectricCar(Car):
    '''电动汽车的特殊之处'''
<code>def __init__(self,make,model,year):
    '''初始化父类的属性'''
    super().__init__(make,model,year)
</code>
my_tesla=ElectricCar('tesla','model s',2016)
print(my_tesla.get_descriptive_name)
输出为>
(program exited with code: 0)
请按任意键继续. . . 
----------------------------------------------------------------------------------------------------
确实是少了一对括号。。。。。。
<code> #!/usr/bin/python3

class Car():
        '''一次模拟汽车的简单尝试'''
        def __init__(self,make,model,year):
                '''初始化描述汽车属性'''
                self.make=make
                self.model=model
                self.year=year
                self.odometer_reading=0

        def get_descriptive_name(self):
                '''返回整洁的描述性信息'''
                long_name=str(self.year)+' ' +self.make+' '+self.model
                return long_name

        def read_odometer(self):
                '''打印出里程表'''
                print("This car has "+str(self.odometer_reading)+" miles on it.")

        def change_odometer(self,mileage):
                '''
                随时改变里程表
                禁止将里程表回调
                '''
                if mileage>=self.odometer_reading:
                        self.odometer_reading=mileage
                else:
                        print("You can't roll back an odometer!")

        def add_odometer(self,miles):
                '''将里程表读数增加指定的值'''
                self.odometer_reading+=miles



class ElectricCar(Car):
        '''电动汽车的特殊之处'''
        def __init__(self,make,model,year):
                '''初始化父类的属性'''
                super().__init__(make,model,year)



my_tesla=ElectricCar('tesla','model s',2016)
print(my_tesla.get_descriptive_name())
</code>