c#新手，在一个xna模板中看到一个按键函数，看不懂，求前辈指点
public bool IsNewKeyPress(Keys key, PlayerIndex? controllingPlayer,
                                            out PlayerIndex playerIndex)
        {
            if (controllingPlayer.HasValue)
            {
                // Read input from the specified player.
                playerIndex = controllingPlayer.Value;
<code>            int i = (int)playerIndex;

            return (CurrentKeyboardStates[i].IsKeyDown(key) &&
                    LastKeyboardStates[i].IsKeyUp(key));
        }
        else
        {
            // Accept input from any player.
            return (IsNewKeyPress(key, PlayerIndex.One, out playerIndex) ||
                    IsNewKeyPress(key, PlayerIndex.Two, out playerIndex) ||
                    IsNewKeyPress(key, PlayerIndex.Three, out playerIndex) ||
                    IsNewKeyPress(key, PlayerIndex.Four, out playerIndex));
        }
    }
</code>
我不明白else中的return。
不是说out关键字是让函数来初始化参数的吗。但是给playerindex赋值的语句在if中，如果没有按键按下，那么if不成立，在else中这个函数会不断的自己调用自己，同时playerindex无法得到值。
本人刚接触编程，不懂怎么学习，理解能力不强，
以上是我的理解，这种理解无疑是错的。希望接触过编程的前辈给指点一下。 
----------------------------------------------------------------------------------------------------
你的理解是正确的。这个函数中，playerIndex 在 if 块中被赋值，但是如果没有执行 if 块，那么 playerIndex 将不会被赋值。

一个简单的修改方法是将 playerIndex 的初始值设置为 null，并在 else 块中返回 false。
<code>public bool IsNewKeyPress(Keys key, PlayerIndex? controllingPlayer, out PlayerIndex playerIndex)
{
    playerIndex = null;

    if (controllingPlayer.HasValue)
    {
        // Read input from the specified player.
        playerIndex = controllingPlayer.Value;

        int i = (int)playerIndex;

        return (CurrentKeyboardStates[i].IsKeyDown(key) &&
                LastKeyboardStates[i].IsKeyUp(key));
    }
    else
    {
        // Accept input from any player.
        return (IsNewKeyPress(key, PlayerIndex.One, out playerIndex) ||
                IsNewKeyPress(key, PlayerIndex.Two, out playerIndex) ||
                IsNewKeyPress(key, PlayerIndex.Three, out playerIndex) ||
                IsNewKeyPress(key, PlayerIndex.Four, out playerIndex));
    }
}
</code>
这样，如果 controllingPlayer 为 null，那么函数将返回 false，同时 playerIndex 也不会被赋值。

另外，注意到函数中的递归调用。如果 controllingPlayer 为 null，那么函数会不断地调用自己，这可能会导致程序堆栈溢出。在这种情况下，递归调用应该替换为循环。
<code>public bool IsNewKeyPress(Keys key, PlayerIndex ? controllingPlayer, out PlayerIndex playerIndex)
{
    playerIndex = null;
    if(controllingPlayer.HasValue)
    {
        // Read input from the specified player.
        playerIndex = controllingPlayer.Value;
        int i = (int) playerIndex;
        return(CurrentKeyboardStates[i].IsKeyDown(key) && LastKeyboardStates[i].IsKeyUp(key));
    }
    else
    {
        // Accept input from any player.
        PlayerIndex[] playerIndices = {
            PlayerIndex.One, PlayerIndex.Two, PlayerIndex.Three, PlayerIndex.Four
        };
        foreach(PlayerIndex index in playerIndices)
        {
            if(IsNewKeyPress(key, index, out playerIndex))
            {
                return true;
            }
        }
        return false;
    }
}
</code>
这样，函数就可以正常工作了。
